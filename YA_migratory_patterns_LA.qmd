---
title: "HW4 Final Visualization"
author: "Patty Park"
date: "3/9/24"
format:
  html:
    embed-resources: true
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(states)
library(maps)
library(patchwork)
library(scales)
library(showtext)
library(spatial)
library(sf)
library(ggrepel)
```

```{r}
#import texts from Google
font_add_google(name = "Merriweather", family = "merri")

showtext_auto()
```

```{r, message=FALSE}

#read in data (create a new folder called 'data' and insert all data in this folder)
od <- read_csv("data/od.csv") #whole entire dataset combined into one
od_race <- read_csv("data/od_race.csv") #dataset separated by race
od_inc <- read_csv("data/od_inc.csv") #dataset separated by income percentiles
od_pooled <- read_csv("data/od_pooled.csv") #dataset technically not 'separated' by a specific factor


#view data: uncomment to view dataset
# View(od)
# View(od_race)
# View(od_inc)
# View(od_pooled)
```

## Data wrangling and cleaning

Here I will reshape the datasets to what I would like to output on the graph. I'll go ahead and transform all four datasets for practice and to give me more flexibility for what I would like to create for my exploratory graphs.

```{r}
#create a new dataframe for state info
state_info <- tibble(state.name, state.region, state.abb) %>% 
  rename(o_state_name = state.name)
```

```{r data manipulation}

#=============Data Manipulation=====================

# Most popular cities not separated by a certain factor
top_pooled <- od_pooled %>% #using od_pooled
  select(o_cz_name, o_state_name, d_cz_name, d_state_name, n, n_tot_o, pool) %>%#select columns we are interested in, helps get rid of repeats
  filter(d_cz_name == "Los Angeles") %>% 
  distinct() %>% #gets rid of repeats in the dataset
  slice_max(n, n = 10) %>%  #find the top 10 most popular cities if applicable
  left_join(state_info, by = "o_state_name") %>%  #left join with state_info dataset to get regions of each state
  mutate(n_formatted = number(n, big.mark = ",")) %>% #adds commas to the numbers so they are formatted correctly (ex. 2,000 instead of 2000)
  #add coordinates to dataset to be able to map correctly
  #the first long lat are for markers for the cities
  mutate(long = c(-118, -117, -122, -121, -88, -121, -112, -115, -122, -74),
         lat = c(34, 33, 37, 38, 42, 37, 33, 36.3, 47, 40.5),
          #the la long lat are for where LA is so when map is made, the connecting line can be made correctly, connecting the two cities together
         #the first -118.001 has to be a different number for the map to correctly graph and not have an error on it
         la_long = c(-118.001, -118, -118, -118, -118, -118, -118, -118, -118, -118), 
         la_lat = c(34, 34, 34, 34, 34, 34, 34, 34, 34, 34)
  )

#can get total white people that moved to LA if
# - get all race information from the od dataset,
# - add all of them up unique to the city they are coming from
# - join them to the other dataset (if needed) and use that to find out the race amount per city



# get total amount of
top_pooled_race <- od %>% 
  select(o_cz_name, o_state_name, d_cz_name, d_state_name, n, n_tot_o, pool) %>%#select columns we are interested in, helps get rid of repeats
  filter(d_cz_name == "Los Angeles" & o_cz_name %in% c("San Diego", "San Francisco", "Sacramento", "Chicago", "Phoenix", "Las Vegas", "Seattle", "New York")) %>% #get the cities we are interested in from top_pooled dataset
  mutate(
    race = str_replace_all(pool, "[Q1,Q2,Q3,Q4,Q5]", "") #gets rid of the Q1, Q2... at the end of each race
  ) %>% 
  group_by(o_cz_name, race) %>% #group by the two columns so we are adding the correct columns by city and race
  mutate(n_tot = sum(n)) %>% #add all the columns together by city moved to and by race
  ungroup() %>%  #ungroup the two columns from earlier
  select(-c(n, n_tot_o, pool)) %>% #take out columns that are not relevant anymore
  distinct() %>% #have only distinct columns to not have redundancies
  #this was all done so I could check my work and see that I was manipulating the dataset correctly
  group_by(race) %>% #group by just the race column
  summarise( #summarise to only get this output in the table
    total = sum(n_tot) #add up all the total amount of races that moved to los angeles
  ) %>% 
  mutate(n_formatted = number(total, big.mark = ",")) #adds commas to the numbers so they are formatted correctly (ex. 2,000 instead of 2000)




#replace na with Northeast
top_pooled$state.region <- top_pooled$state.region %>%
  replace_na('Northeast')

#replace na with dc
top_pooled$state.abb <- top_pooled$state.abb %>%
  replace_na('DC')

#unite the city and state name together into its own column
top_pooled <- top_pooled %>%
  unite("city_state", o_cz_name, state.abb, sep = "-", remove = FALSE)%>%
  filter(city_state != "San Jose-CA")


#view wrangled dataset: uncomment to view dataset
#View(top_pooled)
```

## Visual 1: Map

```{r vis 1 map}
#create first color palette (for map)
# col_pal_9 <- c("black", "#0C3A0C", "#135913", "#187218", "#1D8C1D", "#20AC20", "#2ADB2A", "#48FE48", "#8AED8A")


#create map
map <- top_pooled %>% #piping from top_pooled
  ggplot(aes(long, lat)) + #have aes as long (x) and lat (y)
  borders("state", col="grey30", fill="#F8E6C9") + #create map
  geom_curve(aes(x=long, y=lat, xend=la_long, yend=la_lat, color = o_cz_name), #create ling segment
             curvature = 0.1, 
             alpha = 0.8, 
             linewidth = 1.5, 
             color = "black") + #or use color palette 'col_pal_9'
  #scale_color_manual(values=c("#69a9ff", "#5990d9", "#5284c8", "#4b78b5", "#436ba2", "#3c6090", "#2d4c75","#0f2745", "#293051" )) +
  geom_point(fill=ifelse(top_pooled$city_state %in% c("Los Angeles-CA"), "#2d4c75", "black"), #fill of the point
             size = 5, #size of the point
             color = "white", #outline of the shape
             shape = ifelse(top_pooled$city_state %in% c("Los Angeles-CA"), 24, 21), #what shape the point will be
             stroke = 1.5) + #thickness of the outline of the point
  #create points and specify what color the LA point is verses for the others
  coord_quickmap() + #graph map
#   labs(title = "Map of which City's Population are Moving to Los Angeles",
# subtitle = "A view of which cities have the most migration amounts per person to Los Angeles") +
  #here I will be creating a geom_label per city to be able to control the position of each:
  #San Digeo------
geom_label(aes(label = ifelse(city_state %in% 
                                c("San Diego-CA", "5,000"), top_pooled$o_cz_name, NA)),
           fill = "white",
           color = "black",
           alpha = 1, 
           size = 6, 
           force = 3,
           show.legend = FALSE,
           point.padding = 3,
           nudge_y = -1.1,
           nudge_x = 1,
           arrow = arrow(length = unit(1, "cm")),
           max.overlaps = 20) +
  #Sacramento--------
geom_label(aes(label = ifelse(city_state %in% 
                                c(
                                  "Sacramento-CA"), top_pooled$o_cz_name, NA)),
           fill = "white",
           color = "black",
           alpha = 1, 
           size = 6, 
           force = 3,
           show.legend = FALSE,
           point.padding = 3,
           nudge_y = 1,
           nudge_x = 1.5,
           arrow = arrow(length = unit(1, "cm")),
           max.overlaps = 20) +
  #Chicago------------
geom_label(aes(label = ifelse(city_state %in% 
                                c(
                                  "Chicago-IL"), top_pooled$o_cz_name, NA)),
           fill = "white",
           color = "black",
           alpha = 1, 
           size = 6, 
           force = 3,
           show.legend = FALSE,
           point.padding = 3,
           nudge_y = 1,
           nudge_x = 1,
           arrow = arrow(length = unit(1, "cm")),
           max.overlaps = 20) +
  #Phoenix------------------
geom_label(aes(label = ifelse(city_state %in% 
                                c(
                                  "Phoenix-AZ"), top_pooled$o_cz_name, NA)),
           fill = "white",
           color = "black",
           alpha = 1, 
           size = 6, 
           force = 3,
           show.legend = FALSE,
           point.padding = 3,
           nudge_y = 1,
           nudge_x = 1.3,
           arrow = arrow(length = unit(1, "cm")),
           max.overlaps = 20) +
  #Las Vegas------------------
geom_label(aes(label = ifelse(city_state %in% 
                                c(
                                  "Las Vegas-NV"), top_pooled$o_cz_name, NA)),
           fill = "white",
           color = "black",
           alpha = 1, 
           size = 6, 
           force = 3,
           show.legend = FALSE,
           point.padding = 3,
           nudge_y = 1,
           nudge_x = 1,
           arrow = arrow(length = unit(1, "cm")),
           max.overlaps = 20) +
  #Seattle-------------------
geom_label(aes(label = ifelse(city_state %in% 
                                c(
                                  "Seattle-WA"), top_pooled$o_cz_name, NA)),
           fill = "white",
           color = "black",
           alpha = 1, 
           size = 6, 
           force = 3,
           show.legend = FALSE,
           point.padding = 3,
           nudge_y = 1,
           nudge_x = 0,
           arrow = arrow(length = unit(1, "cm")),
           max.overlaps = 20) +
  #New York------------------
geom_label(aes(label = ifelse(city_state %in% 
                                c("New York-NY"), top_pooled$o_cz_name, NA)),
           fill = "white",
           color = "black",
           alpha = 1, 
           size = 6, 
           force = 3,
           show.legend = FALSE,
           point.padding = 3,
           nudge_y = 1,
           nudge_x = 1,
           arrow = arrow(length = unit(1, "cm")),
           max.overlaps = 20) +
  #Los Angeles----------------
geom_label(aes(label = ifelse(top_pooled$city_state %in% 
                                c("Los Angeles-CA"),top_pooled$o_cz_name, NA)),
           fill = "white",
           color = "black",
           alpha = 1, 
           size = 6, 
           force = 3,
           show.legend = FALSE,
           point.padding = 5,
           nudge_y = -0.8,
           nudge_x = -3,
           arrow = arrow(length = unit(1, "cm")),
           max.overlaps = 20) +
  #San Francisco--------------------
geom_label(aes(label = ifelse(top_pooled$city_state %in% 
                                c("San Francisco-CA"),top_pooled$o_cz_name, NA)),
           fill = "white",
           color = "black",
           alpha = 1, 
           size = 6, 
           force = 3,
           show.legend = FALSE,
           point.padding = 5,
           nudge_y = -1,
           nudge_x = -1.5,
           arrow = arrow(length = unit(1, "cm")),
           max.overlaps = 20) +
  theme_void() + #have theme as void
  #create theme to change layout of plot
  theme(
    legend.text = element_blank(),
    legend.background = element_blank(),
    legend.title = element_blank(),
    legend.key = element_blank(),
    legend.position = "none",
    plot.background = element_rect(fill='transparent'),
    plot.title = element_text(family = "merri", size = 25, color = "#201B22", hjust = 0),
    plot.subtitle = element_text(family = "merri", face = "italic", size = 15, color = "#201B22", hjust = 0),
    plot.margin = margin(r = 45, l = 45),
    panel.border = element_blank(),
    panel.background = element_blank()
  )

#print map
map

#save image
#ggsave("map.png", plot = map, path = ("images"), width = 12, height = 8)



```

## Visual 2: Lollipop Graph

```{r visualization 2 race percentage}
#create second color palette (for lollipop graph)
#col_pal_8 <- c("#0C3A0C", "#135913", "#187218", "#1D8C1D", "#20AC20", "#2ADB2A", "#8AED8A", "#9BD69B")


#Graph two: amount of people moving to Los Angeles
top_race_lolli <- top_pooled_race %>% #piping from top_pooled_race
  mutate(reorder = forcats::fct_reorder(race, total)) %>% #rearrange order from largest on the top to smallest on the bottom
  #filter(city_state != "Los Angeles-CA") %>% #dont need it;filter by taking out Los Angeles
  ggplot(aes(x = race, #create the aes
             y = total)) +
  geom_segment(aes(x=reorder, 
                   xend=reorder, 
                   y=0, 
                   yend=total), #specify the length of each stick
               size = 10, 
               alpha = 1,
               color = "black") +
  # geom_point(size= 10, #specify where the points are located on the graph
  #            color= "black", 
  #            fill= "black") + #alpha("#8AD78A", 0.3), alpha=0.7, shape=21, stroke=2) +
  coord_flip() +
  geom_text(aes(label = n_formatted), 
            vjust = -1.8, 
            family = "merri", 
            size = 6) + #add text showing the amount per lollipop graph
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) + #make sure the y axis is long enough
  #create a hispanic text and place it in the correct box (want it inside)
  geom_text(label = ifelse(top_pooled_race$race %in% c("White"), 
                           top_pooled_race$race,
                           NA),
            color = "darkgrey",
            size = 6,
            hjust = 3, 
            family = "merri") +
  geom_text(label = ifelse(top_pooled_race$race %in% c("Hispanic"), 
                           top_pooled_race$race,
                           NA),
            color = "darkgrey",
            size = 6,
            hjust = 3, 
            family = "merri") +
  geom_text(label = ifelse(top_pooled_race$race %in% c("Other"), 
                           top_pooled_race$race,
                           NA),
            color = "darkgrey",
            size = 6,
            hjust = 3, 
            family = "merri") +
  geom_text(label = ifelse(top_pooled_race$race %in% c("Black"), 
                           top_pooled_race$race,
                           NA),
            color = "darkgrey",
            size = 6,
            hjust = 3, 
            family = "merri") +
  geom_text(label = ifelse(top_pooled_race$race %in% c("Asian"), 
                           top_pooled_race$race,
                           NA),
            color = "darkgrey",
            size = 6,
            hjust = 3, 
            family = "merri") +
  # Theme edits:
  theme(axis.text.y = element_blank(), #take out y axis text
        axis.title.y = element_blank(), #take out y axis title
        panel.background = element_rect(fill='transparent', color = NA), #change background of graph to transparent
        panel.grid = element_blank(), #take out grid
        axis.title.x = element_blank(), #take out x axis title
        axis.text.x = element_blank(), #take out x axis text
        axis.ticks = element_blank(), #take out tick marks
        plot.margin = margin(l = 20), #extend the left margin out
        plot.background = element_rect(fill = "transparent", color = NA) #make background transparent
  )

#print graphic
top_race_lolli

#save graphic
#ggsave("top_ten_lolli.png", plot = top_ten_lolli, path = ("images"), width = 10, height = 7)

```

## Visual 3: bar graph

```{r vis 3: bar graph, warning=FALSE, message=FALSE}
#graph three: pie graph

#---------Data Manipulation for Move in Pie chart----------------
#subset for only LA observation
la_stayed <- top_pooled[1,] %>% # get only the first row of observations
  mutate(travel_status = "Stayed") %>% #create a new column called travel_status with Stayed in the row
  select(travel_status, n) #select only the travel status and n column into the new dataset

#subset for all other observations
la_movedin <- top_pooled[2:9,] %>% #select all other rows in the dataset excluding the first row
  summarise(n = sum(n)) %>% #sum up all the amounts in the n column
  mutate(travel_status = "Moved In") #create a new column called travel status with moved in the row


#combine two datasets into one to make visualization
compare_movein_pool <- full_join(la_stayed, la_movedin) %>% #combine the two datasets into one big one
  mutate(pop_percent = #create a new column
           round(#use the round function to limit the numbers
             x = n/sum(n) *100, #find the percentage of each row
             digits = 1 #limit the rounded numbers to have one decimal
             )#end of round function
         )#end of mutate function

#create pie graph for those that moved into LA as a placeholder
#la_pie_movein <- pie(compare_movein_pool$n, labels = compare_movein_pool$travel_status)


#------------data manipulation for move out chart--------------------
#find out how many people left
la_moveout_amount <- top_pooled[1,7] - top_pooled[1,6]

#create a new dataframe with the information gathered
la_moveout <- data.frame(
  travel_status = "Moved Out",
  n = 355308
)

#combine two datasets into one to make visualization
compare_moveout_pool <- full_join(la_stayed, la_moveout) %>% 
  mutate(pop_percent = round(x = n/sum(n) *100, digits = 1))

#create pie graph for those that moved out of la
#la_pie_moveout <- pie(compare_moveout_pool$n, labels = compare_moveout_pool$travel_status)


#set label position to have them appear on the pie chart. Template from #https://r-charts.com/part-whole/pie-chart-labels-outside-ggplot2/
movein_pool_labels <- compare_movein_pool %>% 
  mutate(csum = rev(cumsum(rev(n))), 
         pos = n/2 + lead(csum, 1),
         pos = if_else(is.na(pos), n/2, pos))

#===============Movein to LA pie chart====================
#create pie graph for LA population
movein_bar <- ggplot(data = compare_movein_pool, #specify what datasets and aes I want to look at
                 aes(x = "", #keep x blank
                     y = rev(n), #the rev() function is used to have the labels appear on the pie chart correctly (cause the pie chart will be seen on the other side instead of the correct side)
                     fill = travel_status)) + #fill will be the travel status since are separating those apart
  geom_bar(stat = "identity", #set stat
           width = 0.5, #line width
           color="white", ##specify the separation between the different colors by differentiating them by white
           fill = c("pink", "green")) + #fill are colors that I think is the best color scheme
  coord_polar("y", start=0) + #set this parameter to create a pie chart
  geom_label_repel(data = movein_pool_labels,
                   aes(y = rev(pos), 
                       label = paste0(rev(pop_percent), "%")),
                   size = 4.5, 
                   nudge_x = 0.5, 
                   show.legend = FALSE, 
                   fill = c("pink", "green")) +
  theme_void() +
  theme(legend.position="none") #have text show up on the graph itself and not just a side bar




#===================Move out of LA pie chart=====================
#set label position to have them appear on the pie chart. Template from #https://r-charts.com/part-whole/pie-chart-labels-outside-ggplot2/
moveout_pool_labels <- compare_moveout_pool %>% 
  mutate(csum = rev(cumsum(rev(n))), 
         pos = n/2 + lead(csum, 1),
         pos = if_else(is.na(pos), n/2, pos))


moveout_bar <- ggplot(data = compare_moveout_pool, #specify what datasets and aes I want to look at
                 aes(x = "", #keep x blank
                     y = rev(n), #the rev() function is used to have the labels appear on the pie chart correctly (cause the pie chart will be seen on the other side instead of the correct side)
                     fill = travel_status)) + #fill will be the travel status since are separating those apart
  geom_bar(stat = "identity", #set status
           width = 0.5, #line width
           color="white", ##specify the separation between the different colors by differentiating them by white
           fill = c("pink", "green")) + #fill are colors that I think is the best color scheme
  coord_polar("y", start=0) + #set this parameter to create a pie chart
  geom_label_repel(data = moveout_pool_labels,
                   aes(y = rev(pos), 
                       label = paste0(rev(pop_percent), "%")),
                   size = 10, 
                   nudge_x = 0.5, 
                   show.legend = FALSE, 
                   fill = c("pink", "green")) +
  theme_void() +
  theme(legend.position="none") #have text show up on the graph itself and not just a side bar


#view bar graphs
# la_bar
# bot_cities_bar_controlled_y

#combine the bar graphs with patchwork
combined_bar <- (movein_bar + bot_cities_bar_controlled_y) +
  plot_annotation(theme = theme(plot.background = element_rect(fill='transparent', color=NA)))

#view combined bargraph
combined_bar

#save combined bargraph
#ggsave("combined_bar.png", plot = combined_bar, path = ("images"), width = 8, height = 4)
```
