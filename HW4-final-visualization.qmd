---
title: "HW4 Final Visualization"
author: "Patty Park"
date: "3/9/24"
format:
  html:
    embed-resources: true
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(states)
library(plotly)
library(sunburstR)
library(showtext)
library(cowplot)
library(maps)
library(geosphere)
library(scales)
```

```{r}
#import texts from Google
font_add_google(name = "Merriweather", family = "merri")

showtext_auto()
```

```{r, message=FALSE}

#read in data
od <- read_csv("data/od.csv") #whole entire dataset combined into one
od_race <- read_csv("data/od_race.csv") #dataset separated by race
od_inc <- read_csv("data/od_inc.csv") #dataset separated by income percentiles
od_pooled <- read_csv("data/od_pooled.csv") #dataset technically not 'separated' by a specific factor


#view data: uncomment to view dataset
# View(od)
# View(od_race)
# View(od_inc)
# View(od_pooled)
```

## Data wrangling and cleaning

Here I will reshape the datasets to what I would like to output on the graph. I'll go ahead and transform all four datasets for practice and to give me more flexibility for what I would like to create for my exploratory graphs.

```{r}
#create a new dataframe for state info
state_info <- tibble(state.name, state.region, state.abb) %>% 
  rename(o_state_name = state.name)
```

```{r}
# Most popular cities not separated by a certain factor
top_ten_pooled <- od_pooled %>% #using od_pooled
  select(o_cz_name, o_state_name, d_cz_name, d_state_name, n, n_tot_o, pool) %>%#select columns we are interested in, helps get rid of repeats
  filter(d_cz_name == "Los Angeles") %>% 
  distinct() %>% #gets rid of repeats in the dataset
  slice_max(n, n = 10) %>%  #find the top 10 most popular cities if applicable
  left_join(state_info, by = "o_state_name") %>%  #left join with state_info dataset to get regions of each state
  mutate(n_formatted = number(n, big.mark = ",")) %>% 
  #add coordinates to dataset to be able to map correctly
  mutate(long = c(-118, -117, -122, -121, -88, -121, -112, -115, -122, -74),
         lat = c(34, 33, 37, 38, 42, 37, 33, 36.3, 47, 40.5),
         la_long = c(-118.001, -118, -118, -118, -118, -118, -118, -118, -118, -118),
         la_lat = c(34, 34, 34, 34, 34, 34, 34, 34, 34, 34)
  )

#replace na with Northeast
top_ten_pooled$state.region <- top_ten_pooled$state.region %>% 
  replace_na('Northeast')

#replace na with dc
top_ten_pooled$state.abb <- top_ten_pooled$state.abb %>% 
  replace_na('DC')

top_ten_pooled <- top_ten_pooled %>% 
  unite("city_state", o_cz_name, state.abb, sep = "-", remove = FALSE)%>% 
  filter(city_state != "San Jose-CA")


#view wrangled dataset: uncomment to view dataset
#View(top_ten_pooled)
```



```{r vis 1 map}
#create first color palette
col_pal_9 <- c("black", "#0C3A0C", "#135913", "#187218", "#1D8C1D", "#20AC20", "#2ADB2A", "#48FE48", "#8AED8A")

#create second color palette
col_pal_8 <- c("#0C3A0C", "#135913", "#187218", "#1D8C1D", "#20AC20", "#2ADB2A", "#8AED8A", "#9BD69B")


#create map
map <- top_ten_pooled %>% #piping from top_ten_pooled
  ggplot(aes(long, lat)) + #have aes as long (x) and lat (y)
  borders("state", col="grey30", fill="gainsboro") + #create map
  geom_curve(aes(x=long, y=lat, xend=la_long, yend=la_lat, color = o_cz_name), #create ling segment
             curvature = 0.1, 
             alpha = 0.8, 
             linewidth = 2, 
             color = col_pal_9) +
  # scale_color_manual(values=c("#69a9ff", "#5990d9", "#5284c8", "#4b78b5", "#436ba2", "#3c6090", "#2d4c75","#0f2745", "#293051" )) +
  geom_point(color=ifelse(top_ten_pooled$city_state %in% c("Los Angeles-CA"), "#2d4c75", "black"), 
             size = 3, 
             color = "black") + #create points and specify what color the LA point is verses for the others
  coord_quickmap() + #graph map
#   labs(title = "Map of which City's Population are Moving to Los Angeles",
# subtitle = "A view of which cities have the most migration amounts per person to Los Angeles") +
  #here I will be creating a geom_label per city to be able to control the position of each:
  #San Digeo------
geom_label(aes(label = ifelse(city_state %in% 
                                c("San Diego-CA"), top_ten_pooled$o_cz_name, NA)),
           fill = "white",
           color = "black",
           alpha = 1, 
           size = 5, 
           force = 3,
           show.legend = FALSE,
           point.padding = 3,
           nudge_y = -1.1,
           nudge_x = 1,
           arrow = arrow(length = unit(1, "cm")),
           max.overlaps = 20) +
  #Sacramento--------
geom_label(aes(label = ifelse(city_state %in% 
                                c(
                                  "Sacramento-CA"), top_ten_pooled$o_cz_name, NA)),
           fill = "white",
           color = "black",
           alpha = 1, 
           size = 5, 
           force = 3,
           show.legend = FALSE,
           point.padding = 3,
           nudge_y = 1,
           nudge_x = 1.5,
           arrow = arrow(length = unit(1, "cm")),
           max.overlaps = 20) +
  #Chicago------------
geom_label(aes(label = ifelse(city_state %in% 
                                c(
                                  "Chicago-IL"), top_ten_pooled$o_cz_name, NA)),
           fill = "white",
           color = "black",
           alpha = 1, 
           size = 5, 
           force = 3,
           show.legend = FALSE,
           point.padding = 3,
           nudge_y = 1,
           nudge_x = 1,
           arrow = arrow(length = unit(1, "cm")),
           max.overlaps = 20) +
  #Phoenix------------------
geom_label(aes(label = ifelse(city_state %in% 
                                c(
                                  "Phoenix-AZ"), top_ten_pooled$o_cz_name, NA)),
           fill = "white",
           color = "black",
           alpha = 1, 
           size = 5, 
           force = 3,
           show.legend = FALSE,
           point.padding = 3,
           nudge_y = 1,
           nudge_x = 1.3,
           arrow = arrow(length = unit(1, "cm")),
           max.overlaps = 20) +
  #Las Vegas------------------
geom_label(aes(label = ifelse(city_state %in% 
                                c(
                                  "Las Vegas-NV"), top_ten_pooled$o_cz_name, NA)),
           fill = "white",
           color = "black",
           alpha = 1, 
           size = 5, 
           force = 3,
           show.legend = FALSE,
           point.padding = 3,
           nudge_y = 1,
           nudge_x = 1,
           arrow = arrow(length = unit(1, "cm")),
           max.overlaps = 20) +
  #Seattle-------------------
geom_label(aes(label = ifelse(city_state %in% 
                                c(
                                  "Seattle-WA"), top_ten_pooled$o_cz_name, NA)),
           fill = "white",
           color = "black",
           alpha = 1, 
           size = 5, 
           force = 3,
           show.legend = FALSE,
           point.padding = 3,
           nudge_y = 1,
           nudge_x = 0,
           arrow = arrow(length = unit(1, "cm")),
           max.overlaps = 20) +
  #New York------------------
geom_label(aes(label = ifelse(city_state %in% 
                                c(
                                  "New York-NY"), top_ten_pooled$o_cz_name, NA)),
           fill = "white",
           color = "black",
           alpha = 1, 
           size = 5, 
           force = 3,
           show.legend = FALSE,
           point.padding = 3,
           nudge_y = 1,
           nudge_x = 1,
           arrow = arrow(length = unit(1, "cm")),
           max.overlaps = 20) +
  #Los Angeles----------------
geom_label(aes(label = ifelse(top_ten_pooled$city_state %in% 
                                c("Los Angeles-CA"),top_ten_pooled$o_cz_name, NA)),
           fill = "white",
           color = "black",
           alpha = 1, 
           size = 5, 
           force = 3,
           show.legend = FALSE,
           point.padding = 5,
           nudge_y = -0.8,
           nudge_x = -3,
           arrow = arrow(length = unit(1, "cm")),
           max.overlaps = 20) +
  #San Francisco--------------------
geom_label(aes(label = ifelse(top_ten_pooled$city_state %in% 
                                c(
                                  "San Francisco-CA"),top_ten_pooled$o_cz_name, NA)),
           fill = "white",
           color = "black",
           alpha = 1, 
           size = 5, 
           force = 3,
           show.legend = FALSE,
           point.padding = 5,
           nudge_y = -1,
           nudge_x = -1.5,
           arrow = arrow(length = unit(1, "cm")),
           max.overlaps = 20) +
  theme_void() + #have theme as void
  #create theme to change layout of plot
  theme(
    legend.text = element_blank(),
    legend.background = element_blank(),
    legend.title = element_blank(),
    legend.key = element_blank(),
    legend.position = "none",
    plot.background = element_rect(fill='transparent'),
    plot.title = element_text(family = "merri", size = 25, color = "#201B22", hjust = 0),
    plot.subtitle = element_text(family = "merri", face = "italic", size = 15, color = "#201B22", hjust = 0),
    plot.margin = margin(r = 45, l = 45),
    panel.border = element_blank(),
    panel.background = element_blank()
  )

#print map
map

#save image
ggsave("map.png", plot = map, path = ("images"), width = 12, height = 8)



```


```{r visualization 2 lollipop graph}
#Graph three: Top 10 Cities
top_ten_lolli <- top_ten_pooled %>% 
  mutate(d_cz_name = forcats::fct_reorder(city_state, desc(n))) %>% 
  filter(city_state != "Los Angeles-CA" & city_state != "San Jose-CA") %>% 
  ggplot(aes(x = city_state, 
             y = n)) +
  geom_segment(aes(x=d_cz_name, xend=d_cz_name, y=0, yend=n), 
               size = 5, 
               alpha = 1,
               color = col_pal_8) +
  #c("#BBC2DD", "#A0A9CF", "#8590C1", "#6A77B4", "#5261A3", "#445188", "#1A4075", "#293051")) +
  geom_point(size= 10, 
             color= "#176417", 
             fill=alpha("#8AD78A", 0.3), alpha=0.7, shape=21, stroke=2) +
  geom_text(aes(label = n_formatted), vjust = -1.8, family = "merri", size = 6) +#vjust = 0.5, hjust = -0.25)+
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  # labs(title = "Cities with Largest Migration to Los Angeles",
  #      y = "Total number of people", #could be changed to 'population
  #      subtitle = "Population migration size per city, showing an approximate amount of people that have moved to Los Angeles",
  #      caption = "Data Source: migrationpatterns.org") +
  theme(axis.text.x = element_text(family = "merri", color = "grey30", size = 15, angle = 45, vjust = 1, hjust= 1), #change x axis font
        axis.text.y = element_blank(), #element_text(family = "roboto condensed", color = "grey30", size = 12), #change y axis font
        plot.title = element_text(family = "merri", face = "bold", size = 35, color = "#201B22", hjust = 0), #change title font
        plot.subtitle = element_text(family = "merri", face = "italic", color = "grey30", size = 12),
        plot.caption = element_text(family = "merri", color = "grey30", size = 12),
        #axis.title.x = element_text(family = "roboto condensed", color = "grey30", size = 16),
        axis.title.y = element_blank(), #element_text(family = "roboto condensed", color = "grey30", size = 16),
        panel.background = element_rect(fill='transparent', color = NA), #change background of graph to white
        panel.grid = element_blank(), #element_line(color = "grey60", linetype = "13"),#change grid to only show x axis and have it a dotted line type
        axis.title.x = element_blank(),
        axis.ticks = element_blank(),
        plot.margin = margin(l = 20),
        plot.background = element_rect(fill = "transparent", color = NA)
  ) 

top_ten_lolli

ggsave("top_ten_lolli.png", plot = top_ten_lolli, path = ("images"), width = 10, height = 7)

```


```{r vis 3: bar graph, warning=FALSE, message=FALSE}

library(patchwork)

#subset for only LA observation
la_pooled <- top_ten_pooled[1,]

#subset for all other observations
migrate_pooled <- top_ten_pooled[2:9,] %>%
  mutate(combined = "Cities Combined",
         total_combined = "Total Population of Cities",
         total = sum(top_ten_pooled$n))

#create bar graph for LA population
la_bar <- ggplot(data = la_pooled, aes(x = city_state, y = n)) +
  geom_col(width = 0.5, fill = "#1A4075") +
  scale_y_continuous(limits = c(0, 1800000)) +
#   labs(title = "Population of LA Compared to All other
# Cities Combined",
# subtitle = "This chart shows the comparison of those that chose to stay in LA verses those that chose to move to LA") +
  geom_text(aes(label = n_formatted), vjust = -0.7) +
  theme(
    panel.background = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    plot.title.position = "plot",
    axis.text.y = element_blank(),
    axis.text.x = element_text(size = 13),
    # axis.title.y = element_text(size = 25),
    axis.ticks.y = element_blank(),
    axis.ticks.x = element_blank(),
    plot.title = element_text(family = "merri", face = "bold", size = 25, color = "#201B22", hjust = 0),
    plot.subtitle = element_text(family = "merri", face = "italic", size = 10, color = "#201B22", hjust = 0),
    plot.background = element_rect(fill='transparent', color = NA),
    panel.border = element_blank(),
    panel.grid = element_blank(),
    plot.margin = margin(r = 1)
  )

#create bar graph on combined cities population
bot_cities_bar_controlled_y <- ggplot() +
  geom_col(data = migrate_pooled, aes(fill = city_state, y = n, x = combined), width = 0.5, position = position_stack(vjust = 1), fill = col_pal_8) +
  # geom_col(data = migrate_pooled, aes(fill = city_state, y = n_tot_o, x = total_combined), width = 0.5, position = position_stack(vjust = 1)) +
  scale_y_continuous(limits = c(0, 1800000)) +  
  guides(fill=guide_legend(title="Cities")) +
  annotate("text", x = 1, y=160000, label = "85,286") +
  theme(
    panel.background = element_blank(),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    plot.background = element_rect(fill='transparent', color=NA),
    axis.text.y = element_blank(),
    axis.text.x = element_text(size = 13),
    legend.title = element_text(size = 25),
    legend.text = element_text(size = 20),
    axis.ticks.y = element_blank(),
    axis.ticks.x = element_blank(),
    legend.position = "none",
    panel.border = element_blank(),
    panel.grid = element_blank()
  )

#view bar graphs
la_bar
bot_cities_bar_controlled_y

#combine the bar graphs with patchwork
design <- "AABB"

combined_bar <- (la_bar + bot_cities_bar_controlled_y) +
  plot_annotation(theme = theme(plot.background = element_rect(fill='transparent', color=NA)))

#view combined bargraph
combined_bar

#save combined bargraph
ggsave("combined_bar.png", plot = combined_bar, path = ("images"), width = 8, height = 4)
```




How many per year

in lollipop, how many people are staying in that city






